package controllers;

import play.Logger;
import play.Play;
import play.data.binding.Binder;
import play.data.validation.MaxSize;
import play.data.validation.Password;
import play.data.validation.Required;
import play.db.Model;
import play.exceptions.TemplateNotFoundException;
import play.i18n.Messages;
import play.mvc.Before;
import play.mvc.Controller;
import play.mvc.Router;
import play.mvc.With;
import play.utils.Java;

import java.lang.annotation.ElementType;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;
import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.ParameterizedType;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.List;

import models.ControlPoint;
import models.User;
import models.UserGroup;

@With(Secure.class)
public abstract class CRUD extends Controller {

	@Before
	public static void addType() throws Exception {
		ObjectType type = ObjectType.get(getControllerClass());
		renderArgs.put("type", type);
		System.out.println("CRUD controller : " + request.actionMethod + "_"
				+ type);
		Security.authorization(type == null ? null : type.toString());
	}

	public static void index() {
		long userID = 1;
		User user;
		user = User.find("byUserName", Security.connected()).first();
		userID = user.id;
		render("CRUD/index.html", userID);
	}

	public static void list(int page, String search, String searchFields,
			String orderBy, String order) {
		ObjectType type = ObjectType.get(getControllerClass());
		notFoundIfNull(type);
		if (page < 1) {
			page = 1;
		}
		List<Model> objects = type.findPage(page, search, searchFields,
				orderBy, order, (String) request.args.get("where"));
		Long count = type.count(search, searchFields,
				(String) request.args.get("where"));
		Long totalCount = type.count(null, null,
				(String) request.args.get("where"));
		try {
			render(type, objects, count, totalCount, page, orderBy, order);
		} catch (TemplateNotFoundException e) {
			render("CRUD/list.html", type, objects, count, totalCount, page,
					orderBy, order);
		}
	}

	public static void show(String id) {
		ObjectType type = ObjectType.get(getControllerClass());
		notFoundIfNull(type);
		Model object = type.findById(id);
		notFoundIfNull(object);
		try {
			render(type, object);
		} catch (TemplateNotFoundException e) {
			render("CRUD/show.html", type, object);
		}
	}

	@SuppressWarnings("deprecation")
	public static void attachment(String id, String field) throws Exception {
		ObjectType type = ObjectType.get(getControllerClass());
		notFoundIfNull(type);
		Model object = type.findById(id);
		notFoundIfNull(object);
		Object att = object.getClass().getField(field).get(object);
		if (att instanceof Model.BinaryField) {
			Model.BinaryField attachment = (Model.BinaryField) att;
			if (attachment == null || !attachment.exists()) {
				notFound();
			}
			response.contentType = attachment.type();
			renderBinary(attachment.get(), attachment.length());
		}
		// DEPRECATED
		if (att instanceof play.db.jpa.FileAttachment) {
			play.db.jpa.FileAttachment attachment = (play.db.jpa.FileAttachment) att;
			if (attachment == null || !attachment.exists()) {
				notFound();
			}
			renderBinary(attachment.get(), attachment.filename);
		}
		notFound();
	}

	public static void edit(String id) throws Exception {
		ObjectType type = ObjectType.get(getControllerClass());
		notFoundIfNull(type);
		Model object = type.findById(id);
		notFoundIfNull(object);
		Binder.bind(object, "object", params.all());
		validation.valid(object);

		if (validation.hasErrors()) {
			renderArgs.put("error", Messages.get("crud.hasErrors"));
			try {
				render(request.controller.replace(".", "/") + "/show.html",
						type, object);
			} catch (TemplateNotFoundException e) {
				render("CRUD/show.html", type, object);
			}
		}
		if (type.modelName.equals("ControlPoint")) {
			ControlPoint trenutni = (ControlPoint) object;
			if (trenutni.controlledGroup != null) {

				// pravilo za roditelja
				UserGroup dete = trenutni.controlledGroup;
				UserGroup roditelj = dete.parentGroup;
				List<UserGroup> deca = dete.childGroups;

				if (roditelj != null) {
					List<ControlPoint> lista = ControlPoint.findAll();
					ArrayList<ControlPoint> izabraneRoleZaParenta = new ArrayList<ControlPoint>();
					for (ControlPoint control : lista) {
						if (control.controlledGroup != null) {
							if (control.controlledGroup.equals(roditelj)) {
								izabraneRoleZaParenta.add(control);
							}
						}
					}
					if (izabraneRoleZaParenta != null) {
						for (ControlPoint control : izabraneRoleZaParenta) {
							if (control.controlledAction
									.equals(trenutni.controlledAction)
									&& (control.controlledResource
											.equals(trenutni.controlledResource))) {
								if (trenutni.allowed != control.allowed) {
									renderArgs.put("error",
											Messages.get("crud.hasErrors"));
									render(request.controller.replace(".", "/")
											+ "/show.html", type, object);
								}
							}
						}
					}
				}
				if (deca != null) {
					List<ControlPoint> lista = ControlPoint.findAll();
					ArrayList<ControlPoint> izabraneRoleZaDecu = new ArrayList<ControlPoint>();
					for (ControlPoint control : lista) {
						for (UserGroup grup : deca) {
							if (control.controlledGroup != null) {
								if (control.controlledGroup.equals(grup)) {
									izabraneRoleZaDecu.add(control);
								}
							}
						}
					}
					if (izabraneRoleZaDecu != null) {
						for (ControlPoint control : izabraneRoleZaDecu) {
							if (control.controlledAction
									.equals(trenutni.controlledAction)
									&& (control.controlledResource
											.equals(trenutni.controlledResource))) {
								if (trenutni.allowed != control.allowed) {
									control._delete();
								}
							}
						}
					}
				}

				List<User> users = User.findAll();
				List<ControlPoint> role = ControlPoint.findAll();
				List<UserGroup> grupeKorisnika = new ArrayList<UserGroup>();
				ArrayList<User> izabrani = new ArrayList<User>();
				for (User user : users) {
					grupeKorisnika = user.groups;
					for (UserGroup gr : grupeKorisnika) {
						if (gr.equals(trenutni.controlledGroup)) {
							izabrani.add(user);
						}
					}
				}
				for (ControlPoint control : role) {
					for (User user : izabrani) {
						if (control.controlledUser != null) {
							if (control.controlledUser.equals(user)) {
								if (control.controlledAction
										.equals(trenutni.controlledAction)
										&& (control.controlledResource
												.equals(trenutni.controlledResource))) {
									if (trenutni.allowed != control.allowed) {
										control._delete();
									}
								}
							}
						}
					}
				}
			}
			if (trenutni.controlledUser != null) {
				List<UserGroup> grupe = UserGroup.findAll();
				List<ControlPoint> role = ControlPoint.findAll();
				List<User> korisniciGrupe = new ArrayList<User>();
				ArrayList<UserGroup> izabrani = new ArrayList<UserGroup>();
				for (UserGroup grup : grupe) {
					korisniciGrupe = grup.users;
					for (User gr : korisniciGrupe) {
						if (gr.equals(trenutni.controlledUser)) {
							izabrani.add(grup);
						}
					}
				}
				for (ControlPoint control : role) {
					for (UserGroup group : izabrani) {
						if (control.controlledGroup != null) {
							if (control.controlledGroup.equals(group)) {
								if (control.controlledAction
										.equals(trenutni.controlledAction)
										&& (control.controlledResource
												.equals(trenutni.controlledResource))) {
									if (trenutni.allowed != control.allowed) {
										// trenutni._delete();
										renderArgs.put("error",
												Messages.get("crud.hasErrors"));
										render(request.controller.replace(".",
												"/") + "/show.html", type,
												object);
									}
								}
							}
						}
					}
				}

			}
		}
		object._save();
		flash.success(Messages.get("crud.saved", type.modelName));
		if (params.get("_save") != null) {
			redirect(request.controller + ".list");
		}
		redirect(request.controller + ".show", object._key());
	}

	public static void createPage() throws Exception {
		ObjectType type = ObjectType.get(getControllerClass());
		notFoundIfNull(type);
		Constructor<?> constructor = type.entityClass.getDeclaredConstructor();
		constructor.setAccessible(true);
		Model object = (Model) constructor.newInstance();
		try {
			render(type, object);
		} catch (TemplateNotFoundException e) {
			render("CRUD/createPage.html", type, object);
		}
	}

	public static void create() throws Exception {
		ObjectType type = ObjectType.get(getControllerClass());
		notFoundIfNull(type);
		Constructor<?> constructor = type.entityClass.getDeclaredConstructor();
		constructor.setAccessible(true);
		Model object = (Model) constructor.newInstance();
		Binder.bind(object, "object", params.all());
		validation.valid(object);
		if (validation.hasErrors()) {
			renderArgs.put("error", Messages.get("crud.hasErrors"));
			try {
				render(request.controller.replace(".", "/")
						+ "/createPage.html", type, object);
			} catch (TemplateNotFoundException e) {
				render("CRUD/createPage.html", type, object);
			}
		}
		if (type.modelName.equals("ControlPoint")) {
			ControlPoint trenutni = (ControlPoint) object;
			if (trenutni.controlledGroup != null) {

				// pravilo za roditelja
				UserGroup dete = trenutni.controlledGroup;
				UserGroup roditelj = dete.parentGroup;
				List<UserGroup> deca = dete.childGroups;

				if (roditelj != null) {
					List<ControlPoint> lista = ControlPoint.findAll();
					ArrayList<ControlPoint> izabraneRoleZaParenta = new ArrayList<ControlPoint>();
					for (ControlPoint control : lista) {
						if (control.controlledGroup != null) {
							if (control.controlledGroup.equals(roditelj)) {
								izabraneRoleZaParenta.add(control);
							}
						}
					}
					if (izabraneRoleZaParenta != null) {
						for (ControlPoint control : izabraneRoleZaParenta) {
							if (control.controlledAction
									.equals(trenutni.controlledAction)
									&& (control.controlledResource
											.equals(trenutni.controlledResource))) {
								if (trenutni.allowed != control.allowed) {
									renderArgs.put("error",
											Messages.get("crud.hasErrors"));
									render(request.controller.replace(".", "/")
											+ "/createPage.html", type, object);
								}
							}
						}
					}
				}
				if (deca != null) {
					List<ControlPoint> lista = ControlPoint.findAll();
					ArrayList<ControlPoint> izabraneRoleZaDecu = new ArrayList<ControlPoint>();
					for (ControlPoint control : lista) {
						for (UserGroup grup : deca) {
							if (control.controlledGroup != null) {
								if (control.controlledGroup.equals(grup)) {
									izabraneRoleZaDecu.add(control);
								}
							}
						}
					}
					if (izabraneRoleZaDecu != null) {
						for (ControlPoint control : izabraneRoleZaDecu) {
							if (control.controlledAction
									.equals(trenutni.controlledAction)
									&& (control.controlledResource
											.equals(trenutni.controlledResource))) {
								if (trenutni.allowed != control.allowed) {
									control._delete();
								}
							}
						}
					}
				}

				List<User> users = User.findAll();
				List<ControlPoint> role = ControlPoint.findAll();
				List<UserGroup> grupeKorisnika = new ArrayList<UserGroup>();
				ArrayList<User> izabrani = new ArrayList<User>();
				for (User user : users) {
					grupeKorisnika = user.groups;
					for (UserGroup gr : grupeKorisnika) {
						if (gr.equals(trenutni.controlledGroup)) {
							izabrani.add(user);
						}
					}
				}
				for (ControlPoint control : role) {
					for (User user : izabrani) {
						if (control.controlledUser != null) {
							if (control.controlledUser.equals(user)) {
								if (control.controlledAction
										.equals(trenutni.controlledAction)
										&& (control.controlledResource
												.equals(trenutni.controlledResource))) {
									if (trenutni.allowed != control.allowed) {
										control._delete();
									}
								}
							}
						}
					}
				}
			}
			if (trenutni.controlledUser != null) {
				List<UserGroup> grupe = UserGroup.findAll();
				List<ControlPoint> role = ControlPoint.findAll();
				List<User> korisniciGrupe = new ArrayList<User>();
				ArrayList<UserGroup> izabrani = new ArrayList<UserGroup>();
				for (UserGroup grup : grupe) {
					korisniciGrupe = grup.users;
					for (User gr : korisniciGrupe) {
						if (gr.equals(trenutni.controlledUser)) {
							izabrani.add(grup);
						}
					}
				}
				for (ControlPoint control : role) {
					for (UserGroup group : izabrani) {
						if (control.controlledGroup != null) {
							if (control.controlledGroup.equals(group)) {
								if (control.controlledAction
										.equals(trenutni.controlledAction)
										&& (control.controlledResource
												.equals(trenutni.controlledResource))) {
									if (trenutni.allowed != control.allowed) {
										// trenutni._delete();
										renderArgs.put("error",
												Messages.get("crud.hasErrors"));
										render(request.controller.replace(".",
												"/") + "/createPage.html",
												type, object);
									}
								}
							}
						}
					}
				}

			}
		}

		object._save();
		flash.success(Messages.get("crud.created", type.modelName));
		if (params.get("_save") != null) {
			redirect(request.controller + ".list");
		}
		if (params.get("_saveAndAddAnother") != null) {
			redirect(request.controller + ".createPage");
		}

		redirect(request.controller + ".show", object._key());
	}

	public static void delete(String id) {

		ObjectType type = ObjectType.get(getControllerClass());
		notFoundIfNull(type);
		Model object = type.findById(id);
		notFoundIfNull(object);

		if (type.modelName.equals("Action")) {
			List<ControlPoint> ak = ControlPoint.findAll();
			List<ControlPoint> akcije = new ArrayList<ControlPoint>();

			for (ControlPoint controlPoint : ak) {
				if (controlPoint.controlledAction != null) {
					if (controlPoint.controlledAction.equals(object)) {
						akcije.add(controlPoint);
					}
				}
			}
			for (ControlPoint controlPoint : akcije) {
				if (!Security.check("T_delete_ControlPoint" + "_"
						+ controlPoint._key())) {
					flash.error(Messages.get("crud.delete.error",
							type.modelName));
					redirect(request.controller + ".show", object._key());
				}
			}
			try {
				if (akcije != null) {
					for (ControlPoint controlPoint : akcije) {
						controlPoint._delete();
					}
				}
				object._delete();
				flash.success(Messages.get("crud.deleted", type.modelName));
				redirect(request.controller + ".list");
			} catch (Exception e) {
				flash.error(Messages.get("crud.delete.error", type.modelName));
				redirect(request.controller + ".show", object._key());
			}
		}

		else if (type.modelName.equals("User")) {
			List<ControlPoint> korisnici = ControlPoint.findAll();
			List<ControlPoint> kor = new ArrayList<ControlPoint>();

			for (ControlPoint controlPoint : korisnici) {
				if (controlPoint.controlledUser != null) {
					if (controlPoint.controlledUser.equals(object)) {
						kor.add(controlPoint);
					}
				}
			}
			for (ControlPoint controlPoint : kor) {
				if (!Security.check("T_delete_ControlPoint" + "_"
						+ controlPoint._key())) {
					flash.error(Messages.get("crud.delete.error",
							type.modelName));
					redirect(request.controller + ".show", object._key());
				}
			}

			try {
				if (kor != null) {
					for (ControlPoint controlPoint : kor) {
						controlPoint._delete();
					}
				}
				object._delete();
				flash.success(Messages.get("crud.deleted", type.modelName));
				redirect(request.controller + ".list");
			} catch (Exception e) {
				flash.error(Messages.get("crud.delete.error", type.modelName));
				redirect(request.controller + ".show", object._key());
			}
		}

		else if (type.modelName.equals("Resource")) {

			List<ControlPoint> res = ControlPoint.findAll();
			List<ControlPoint> resource = new ArrayList<ControlPoint>();

			for (ControlPoint controlPoint : res) {
				if (controlPoint.controlledResource != null) {

					if (controlPoint.controlledResource.equals(object)) {
						resource.add(controlPoint);
					}
				}
			}
			for (ControlPoint controlPoint : resource) {
				if (!Security.check("T_delete_ControlPoint" + "_"
						+ controlPoint._key())) {
					flash.error(Messages.get("crud.delete.error",
							type.modelName));
					redirect(request.controller + ".show", object._key());
				}
			}
			try {
				if (resource != null) {
					for (ControlPoint controlPoint : resource) {
						controlPoint._delete();
					}
				}
				object._delete();
				flash.success(Messages.get("crud.deleted", type.modelName));
				redirect(request.controller + ".list");
			} catch (Exception e) {
				flash.error(Messages.get("crud.delete.error", type.modelName));
				redirect(request.controller + ".show", object._key());
			}

		}

		else if (type.modelName.equals("UserGroup")) {

			List<ControlPoint> gru = ControlPoint.findAll();
			List<ControlPoint> grupe = new ArrayList<ControlPoint>();

			for (ControlPoint controlPoint : gru) {
				if (controlPoint.controlledGroup != null) {

					if (controlPoint.controlledGroup.equals(object)) {
						grupe.add(controlPoint);
					}
				}
			}
			for (ControlPoint controlPoint : grupe) {
				if (!Security.check("T_delete_ControlPoint" + "_"
						+ controlPoint._key())) {
					flash.error(Messages.get("crud.delete.error",
							type.modelName));
					redirect(request.controller + ".show", object._key());
				}
			}
			try {
				if (grupe != null) {
					for (ControlPoint controlPoint : grupe) {
						controlPoint._delete();
					}
				}
				object._delete();
				flash.success(Messages.get("crud.deleted", type.modelName));
				redirect(request.controller + ".list");
			} catch (Exception e) {
				flash.error(Messages.get("crud.delete.error", type.modelName));
				redirect(request.controller + ".show", object._key());
			}
		} else {

			try {
				object._delete();
			} catch (Exception e) {
				flash.error(Messages.get("crud.delete.error", type.modelName));
				redirect(request.controller + ".show", object._key());
			}
			flash.success(Messages.get("crud.deleted", type.modelName));
			redirect(request.controller + ".list");
		}
	}

	protected static ObjectType createObjectType(
			Class<? extends Model> entityClass) {
		return new ObjectType(entityClass);
	}

	// ~~~~~~~~~~~~~
	@Retention(RetentionPolicy.RUNTIME)
	@Target(ElementType.TYPE)
	public @interface For {
		Class<? extends Model> value();
	}

	@Retention(RetentionPolicy.RUNTIME)
	@Target(ElementType.FIELD)
	public @interface Exclude {
	}

	@Retention(RetentionPolicy.RUNTIME)
	@Target(ElementType.FIELD)
	public @interface Hidden {
	}

	// ~~~~~~~~~~~~~
	static int getPageSize() {
		return Integer.parseInt(Play.configuration.getProperty("crud.pageSize",
				"30"));
	}

	public static class ObjectType implements Comparable<ObjectType> {

		public Class<? extends Controller> controllerClass;
		public Class<? extends Model> entityClass;
		public String name;
		public String modelName;
		public String controllerName;
		public String keyName;

		public ObjectType(Class<? extends Model> modelClass) {
			this.modelName = modelClass.getSimpleName();
			this.entityClass = modelClass;
			this.keyName = Model.Manager.factoryFor(entityClass).keyName();
		}

		@SuppressWarnings("unchecked")
		public ObjectType(String modelClass) throws ClassNotFoundException {
			this((Class<? extends Model>) Play.classloader
					.loadClass(modelClass));
		}

		public static ObjectType forClass(String modelClass)
				throws ClassNotFoundException {
			return new ObjectType(modelClass);
		}

		public static ObjectType get(Class<? extends Controller> controllerClass) {
			Class<? extends Model> entityClass = getEntityClassForController(controllerClass);
			if (entityClass == null
					|| !Model.class.isAssignableFrom(entityClass)) {
				return null;
			}
			ObjectType type;
			try {
				type = (ObjectType) Java.invokeStaticOrParent(controllerClass,
						"createObjectType", entityClass);
			} catch (Exception e) {
				Logger.error(e,
						"Couldn't create an ObjectType. Use default one.");
				type = new ObjectType(entityClass);
			}
			type.name = controllerClass.getSimpleName().replace("$", "");
			type.controllerName = controllerClass.getSimpleName().toLowerCase()
					.replace("$", "");
			type.controllerClass = controllerClass;
			return type;
		}

		@SuppressWarnings("unchecked")
		public static Class<? extends Model> getEntityClassForController(
				Class<? extends Controller> controllerClass) {
			if (controllerClass.isAnnotationPresent(For.class)) {
				return ((For) (controllerClass.getAnnotation(For.class)))
						.value();
			}
			for (Type it : controllerClass.getGenericInterfaces()) {
				if (it instanceof ParameterizedType) {
					ParameterizedType type = (ParameterizedType) it;
					if (((Class<?>) type.getRawType()).getSimpleName().equals(
							"CRUDWrapper")) {
						return (Class<? extends Model>) type
								.getActualTypeArguments()[0];
					}
				}
			}
			String name = controllerClass.getSimpleName().replace("$", "");
			name = "models." + name.substring(0, name.length() - 1);
			try {
				return (Class<? extends Model>) Play.classloader
						.loadClass(name);
			} catch (ClassNotFoundException e) {
				return null;
			}
		}

		public Object getListAction() {
			return Router.reverse(controllerClass.getName().replace("$", "")
					+ ".list");
		}

		public Object getCreatePageAction() {
			return Router.reverse(controllerClass.getName().replace("$", "")
					+ ".createPage");
		}

		public Long count(String search, String searchFields, String where) {
			return Model.Manager.factoryFor(entityClass).count(
					searchFields == null ? new ArrayList<String>()
							: Arrays.asList(searchFields.split("[ ]")), search,
					where);
		}

		@SuppressWarnings("unchecked")
		public List<Model> findPage(int page, String search,
				String searchFields, String orderBy, String order, String where) {
			return Model.Manager.factoryFor(entityClass).fetch(
					(page - 1) * getPageSize(),
					getPageSize(),
					orderBy,
					order,
					searchFields == null ? new ArrayList<String>() : Arrays
							.asList(searchFields.split("[ ]")), search, where);
		}

		public Model findById(Object id) {
			if (id == null)
				return null;
			return Model.Manager.factoryFor(entityClass).findById(id);
		}

		public List<ObjectField> getFields() {
			List<ObjectField> fields = new ArrayList<ObjectField>();
			List<ObjectField> hiddenFields = new ArrayList<ObjectField>();
			for (Model.Property f : Model.Manager.factoryFor(entityClass)
					.listProperties()) {
				ObjectField of = new ObjectField(f);
				if (of.type != null) {
					if (of.type.equals("hidden")) {
						hiddenFields.add(of);
					} else {
						fields.add(of);
					}
				}
			}

			hiddenFields.addAll(fields);
			return hiddenFields;
		}

		public ObjectField getField(String name) {
			for (ObjectField field : getFields()) {
				if (field.name.equals(name)) {
					return field;
				}
			}
			return null;
		}

		public int compareTo(ObjectType other) {
			return modelName.compareTo(other.modelName);
		}

		@Override
		public String toString() {
			return modelName;
		}

		public static class ObjectField {

			private Model.Property property;
			public String type = "unknown";
			public String name;
			public boolean multiple;
			public boolean required;

			@SuppressWarnings("deprecation")
			public ObjectField(Model.Property property) {
				Field field = property.field;
				this.property = property;
				if (CharSequence.class.isAssignableFrom(field.getType())) {
					type = "text";
					if (field.isAnnotationPresent(MaxSize.class)) {
						int maxSize = field.getAnnotation(MaxSize.class)
								.value();
						if (maxSize > 100) {
							type = "longtext";
						}
					}
					if (field.isAnnotationPresent(Password.class)) {
						type = "password";
					}
				}
				if (Number.class.isAssignableFrom(field.getType())
						|| field.getType().equals(double.class)
						|| field.getType().equals(int.class)
						|| field.getType().equals(long.class)) {
					type = "number";
				}
				if (Boolean.class.isAssignableFrom(field.getType())
						|| field.getType().equals(boolean.class)) {
					type = "boolean";
				}
				if (Date.class.isAssignableFrom(field.getType())) {
					type = "date";
				}
				if (property.isRelation) {
					type = "relation";
				}
				if (property.isMultiple) {
					multiple = true;
				}
				if (Model.BinaryField.class.isAssignableFrom(field.getType())
						|| /** DEPRECATED **/
						play.db.jpa.FileAttachment.class.isAssignableFrom(field
								.getType())) {
					type = "binary";
				}
				if (field.getType().isEnum()) {
					type = "enum";
				}
				if (property.isGenerated) {
					type = null;
				}
				if (field.isAnnotationPresent(Required.class)) {
					required = true;
				}
				if (field.isAnnotationPresent(Hidden.class)) {
					type = "hidden";
				}
				if (field.isAnnotationPresent(Exclude.class)) {
					type = null;
				}
				if (java.lang.reflect.Modifier.isFinal(field.getModifiers())) {
					type = null;
				}
				name = field.getName();
			}

			public List<Object> getChoices() {
				return property.choices.list();
			}
		}
	}
}
